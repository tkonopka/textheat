{"version":3,"sources":["../../build/colors.js","../../build/TextHeat.js","example1.js","toolbar.js","example2.js","example3.js","App.js","reportWebVitals.js","index.js"],"names":["hex2rgb","x","map","i","substr","v","parseInt","rgb2hex","Math","round","toString","padStart","join","colorRamp","start","end","n","start_rgb","end_rgb","increment_rgb","Array","from","keys","j","colorArray","colors","col_len","length","slice","result","ramp_len","ceil","ramp","min","forwardRef","React","useImperativeHandle","unit_interval","max","joinSegments","values","weights","new_values","new_weights","push","getOffsetRelativeTo","parentElement","currentNode","prevSibling","contains","previousSibling","innerText","nodeValue","parentNode","getContent","element","children","childNodes","child","hasChildNodes","textContent","parseFloat","getAttribute","changeContent","data","increment","old_values","old_weights","pos","i_value","i_weight","i_len","TextHeat","props","ref","value","weight","editable","breakpoint","w","filter","b","useState","setData","color_array","mainRef","createRef","segments","color","createElement","key","style","backgroundColor","getSelection","el","current","selection","document","anchorNode","range","getRangeAt","startContainer","startOffset","endContainer","endOffset","JSON","parse","stringify","incrementWeight","undefined","content","setWeight","refresh","className","contentEditable","suppressContentEditableWarning","onPaste","e","preventDefault","text","originalEvent","clipboardData","getData","execCommand","role","sentence","split","ExampleStatic1","ExampleStatic2","ExampleStatic3","PaintToolbar","paintValue","setPaintValue","handlePaint","Stack","direction","alignItems","spacing","Box","sx","width","IconButton","component","onClick","Typography","id","gutterBottom","align","Slider","defaultValue","step","size","onChange","valueLabelDisplay","TouchUpToolbar","touchValue","setTouchValue","handleUpdate","PopoverContent","TextHeatToolbar","target","mode","setMode","anchorEl","setAnchorEl","setContent","open","Boolean","Grid","container","justify","item","xs","ToggleButtonGroup","exclusive","ToggleButton","justifyContent","currentTarget","Popover","onClose","anchorOrigin","vertical","horizontal","ExampleAdjustable","ExampleEditable","SectionIntro","LinkCode","filenames","links","f","url","base_url","href","rel","SectionStatic","SectionAdjustable","SectionEditable","SectionApi","App","Container","maxWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"iaAQO,SAASA,EAAQC,GACtB,MAAO,CAAC,EAAG,EAAG,GAAGC,KAAI,SAAAC,GAAC,OAAIF,EAAEG,OAAOD,EAAG,MAAID,KAAI,SAAAG,GAAC,OAAIC,SAASD,EAAG,OAAKH,KAAI,SAAAG,GAAC,OAAIA,EAAI,OAS5E,SAASE,EAAQN,GACtB,MAAO,IAAMA,EAAEC,KAAI,SAAAG,GAAC,OAAIG,KAAKC,MAAU,IAAJJ,MAAUH,KAAI,SAAAG,GAAC,OAAIA,EAAEK,SAAS,IAAIC,SAAS,EAAG,QAAMC,KAAK,IAgBvF,SAASC,EAAUC,EAAOC,GAAY,IAAPC,EAAO,uDAAH,EAClCC,EAAYjB,EAAQc,GACpBI,EAAUlB,EAAQe,GAClBI,EAAgB,CAAC,EAAG,EAAG,GAAGjB,KAAI,SAAAC,GAAC,OAAKe,EAAQf,GAAKc,EAAUd,KAAOa,EAAI,MAC5E,OAAOI,MAAMC,KAAK,IAAID,MAAMJ,GAAGM,QAAQpB,KAAI,SAAAC,GAAC,MAAI,CAAC,EAAG,EAAG,GAAGD,KAAI,SAAAqB,GAAC,OAAIN,EAAUM,GAAKpB,EAAIgB,EAAcI,SAAKrB,KAAI,SAAAD,GAAC,OAAIM,EAAQN,MAWrH,SAASuB,EAAWC,GAAiB,IAATT,EAAS,uDAAL,IAC/BU,EAAUD,EAAOE,OACvB,GAAID,GAAWV,EAAG,OAAOS,EAAOG,MAAM,EAAGZ,GACzC,GAAgB,IAAZU,EAAe,OAAOb,EAAUY,EAAO,GAAIA,EAAO,GAAIT,GAI1D,IAHA,IAAMa,EAAS,IAAIT,MAAMJ,GACnBc,EAAWtB,KAAKuB,KAAKf,GAAKU,EAAU,IAEjCvB,EAAI,EAAGA,EAAIuB,EAAU,EAAGvB,IAG/B,IAFA,IAAI6B,EAAOnB,EAAUY,EAAOtB,GAAIsB,EAAOtB,EAAI,GAAI2B,GAEtCP,EAAI,EAAGA,EAAIO,EAAUP,IAC5BM,EAAOrB,KAAKyB,IAAIzB,KAAKC,MAAMN,EAAIa,GAAKU,EAAU,IAAMH,EAAGP,EAAI,IAAMgB,EAAKT,GAI1E,OAAOM,EC9DT,IACEK,EAEEC,IAFFD,WACAE,EACED,IADFC,oBAIIC,EAAgB,SAAAhC,GACpB,OAAOG,KAAKyB,IAAI,EAAGzB,KAAK8B,IAAI,EAAG9B,KAAKC,MAAU,IAAJJ,GAAY,OAKxD,SAASkC,EAAaC,EAAQC,GAI5B,IAHA,IAAMC,EAAa,CAACF,EAAO,IACrBG,EAAc,CAACF,EAAQ,IAEpBtC,EAAI,EAAGA,EAAIsC,EAAQd,OAAQxB,IAC9BsC,EAAQtC,KAAOsC,EAAQtC,EAAI,GAC7BuC,EAAWA,EAAWf,OAAS,IAAMa,EAAOrC,IAE5CuC,EAAWE,KAAKJ,EAAOrC,IACvBwC,EAAYC,KAAKH,EAAQtC,KAI7B,MAAO,CAACuC,EAAYC,GAKtB,SAASE,EAAoBC,EAAeC,GAC1C,IACIC,EADAnB,EAAS,EAGb,GAAIkB,IAAgBD,EAAe,OAAO,EAC1C,IAAKA,EAAcG,SAASF,GAAc,OAAQ,EAElD,KAAOC,GAAeA,GAAeD,GAAaG,iBAEhDrB,IADcmB,EAAYG,WAAaH,EAAYI,WAAa,IAC1CzB,OAGxB,OAAOE,EAASgB,EAAoBC,EAAeC,EAAYM,YAMjE,SAASC,EAAWC,GAGlB,IAH8C,IAAnB1B,EAAmB,uDAAV,CAAC,GAAI,IACnC2B,EAAWpC,MAAMC,KAAKkC,EAAQE,YAEpC,MAAkBD,EAAlB,eAA4B,CAAvB,IAAIE,EAAK,KACRA,EAAMC,gBACR9B,EAASyB,EAAWI,EAAO7B,IAE3BA,EAAO,GAAGe,KAAKc,EAAME,aACrB/B,EAAO,GAAGe,KAAKP,EAAcwB,WAAWH,EAAMZ,cAAcgB,aAAa,mBAI7E,OAAOjC,EAGT,SAASkC,EAAcC,EAAMlD,EAAOC,EAAKV,GAQvC,IAR6D,IAAnB4D,EAAmB,wDACvDC,EAAaF,EAAK,GAClBG,EAAcH,EAAK,GACrBI,EAAM,EACNjE,EAAI,EACJuC,EAAa,GACbC,EAAc,GAEXxC,EAAI+D,EAAWvC,QAAQ,CAC5B,IAAI0C,EAAUH,EAAW/D,GACrBmE,EAAWH,EAAYhE,GACvBoE,EAAQF,EAAQ1C,OAEhByC,EAAMG,GAASzD,GAASsD,GAAOrD,GAEjC2B,EAAWE,KAAKyB,GAChB1B,EAAYC,KAAK0B,IACRF,IAAQtD,GAASsD,EAAMG,IAAUxD,GAE1C2B,EAAWE,KAAKyB,GAChB1B,EAAYC,KAAKqB,EAAYK,EAAWjE,EAAIA,KAGxC+D,EAAMtD,GACR4B,EAAWE,KAAKyB,EAAQzC,MAAM,EAAGd,EAAQsD,IACzCzB,EAAYC,KAAK0B,GACjB5B,EAAWE,KAAKyB,EAAQzC,MAAMd,EAAQsD,EAAKrD,EAAMqD,IACjDzB,EAAYC,KAAKqB,EAAYK,EAAWjE,EAAIA,KAE5CqC,EAAWE,KAAKyB,EAAQzC,MAAM,EAAGb,EAAMqD,IACvCzB,EAAYC,KAAKqB,EAAYK,EAAWjE,EAAIA,IAG1C+D,EAAMG,EAAQxD,IAChB2B,EAAWE,KAAKyB,EAAQzC,MAAMb,EAAMqD,IACpCzB,EAAYC,KAAK0B,KAIrBF,GAAOG,EACPpE,GAAK,EAGP,OAAOoC,EAAaG,EAAYC,EAAYzC,KAAI,SAAAD,GAAC,OAAIoC,EAAcpC,OCrGrE,IDwGA,IAkGeuE,EAlGEtC,GAAW,SAACuC,EAAOC,GAClC,IACEC,EAIEF,EAJFE,MACAC,EAGEH,EAHFG,OACAnD,EAEEgD,EAFFhD,OACAoD,EACEJ,EADFI,SAQF,GAFKF,IAAOA,EAAQ,CAAC,KAEA,kBAAVA,EACT,GAAIC,GAAUA,EAAOjD,SAAWgD,EAAMhD,OAAQ,CAC5C,IAAMmD,EAAaF,EAAO1E,KAAI,SAAC6E,EAAG5E,GAChC,GAAU,IAANA,GAAW4E,GAAKH,EAAOzE,EAAI,GAAI,OAAOA,KACzC6E,QAAO,SAAA7E,GAAC,OAAIA,GAAK,KACpBwE,EAAQG,EAAW5E,KAAI,SAAC+E,EAAG9E,GAAJ,OAAUwE,EAAM/C,MAAMqD,EAAGH,EAAW3E,EAAI,OAC/DyE,EAASE,EAAW5E,KAAI,SAAC+E,EAAG9E,GAAJ,OAAUyE,EAAOK,WAEzCN,EAAQ,CAACA,GACTC,EAAS,CAAC,GAId,MAAwBM,mBAAS,CAACP,EAAOC,IAAzC,mBAAOZ,EAAP,KAAamB,EAAb,KACMC,EAA8C5D,EAAd,qBAAXC,EAAoC,CAAC,UAAW,WAA8BA,EAAlB,KACjF4D,EAAuBlD,IAAMmD,YAC7BC,EAAWvB,EAAK,GAAG9D,KAAI,SAACD,EAAGE,GAC/B,IAAIqF,EAAQJ,EAAY5E,KAAKC,MAAmB,IAAbuD,EAAK,GAAG7D,KAC3C,OAAoBgC,IAAMsD,cAAc,OAAQ,CAC9CC,IAAKvF,EACL,cAAe6D,EAAK,GAAG7D,GACvBwF,MAAO,CACLC,gBAAiBJ,IAElBvF,MAeC4F,EAAe,WACnB,IAAMC,EAAKT,EAAQU,QACbC,EAAYC,SAASJ,eAC3B,IAAKC,EAAG7C,SAAS+C,EAAUE,YAAa,MAAO,EAAE,GAAI,GACrD,IAAIC,EAAQH,EAAUI,WAAW,GAGjC,MAAO,CAFKvD,EAAoBiD,EAAIK,EAAME,gBAAkBF,EAAMG,YACxDzD,EAAoBiD,EAAIK,EAAMI,cAAgBJ,EAAMK,YA+BhE,OA1BApE,EAAoBsC,GAAK,iBAAO,CAC9BpB,WAAY,WACV,OAAOmD,KAAKC,MAAMD,KAAKE,UAAU3C,KAEnC4C,gBAAiB,SAACvG,EAAGS,EAAOC,GAC1B,QAAc8F,IAAV/F,QAA+B+F,IAAR9F,EAAmB,OAC7B8E,IAD6B,mBAC3C/E,EAD2C,KACpCC,EADoC,KAI9C,GAAIA,IAAQD,EAAZ,CACA,IAAMgG,EAAUxD,EAAW+B,EAAQU,SACnCZ,EAAQpB,EAAc+C,EAAShG,EAAOC,EAAKV,GAAG,MAEhD0G,UAAW,SAAC1G,EAAGS,EAAOC,GACpB,QAAc8F,IAAV/F,QAA+B+F,IAAR9F,EAAmB,OAC7B8E,IAD6B,mBAC3C/E,EAD2C,KACpCC,EADoC,KAI9C,GAAIA,IAAQD,EAAZ,CACA,IAAMgG,EAAUxD,EAAW+B,EAAQU,SACnCZ,EAAQpB,EAAc+C,EAAShG,EAAOC,EAAKV,GAAG,MAEhD2G,QAAS,WACP7B,EAAQ7B,EAAW+B,EAAQU,eAGX5D,IAAMsD,cAAc,MAAO,CAC7Cf,IAAKW,EACL4B,UAAW,WACXC,gBAAiBrC,EACjBsC,gCAAgC,EAChCC,QAjDkB,SAAAC,GAClBA,EAAEC,iBACF,IAAIC,GAAQF,EAAEG,eAAiBH,GAAGI,cAAcC,QAAQ,cACxDzB,SAAS0B,YAAY,cAAc,EAAOJ,IA+C1CK,KAAM,WACLrC,M,eCzMCX,EAASiD,IAASC,MAAM,IAAI5H,KAAI,SAACC,GAAD,OAAO,KACpCA,EAAE,EAAGA,EAAE,GAAIA,IAAOyE,EAAO,EAAEzE,GAAG,GACvC,IAAK,IAAIA,EAAE,EAAGA,EAAE,EAAGA,IAAOyE,EAAO,EAAEzE,GAAG,GACtC,IAAK,IAAIA,EAAE,EAAGA,EAAE,EAAGA,IAAOyE,EAAO,GAAGzE,GAAG,GACvC,IAAK,IAAIA,EAAE,EAAGA,EAAE,EAAGA,IAAOyE,EAAO,GAAGzE,GAAG,GACvC,IAAK,IAAIA,EAAE,EAAGA,EAAE,EAAGA,IAAOyE,EAAO,GAAGzE,GAAG,GACvC,IAAK,IAAIA,EAAE,EAAGA,EAAE,EAAGA,IAAOyE,EAAO,GAAGzE,GAAG,GACvC,IAAK,IAAIA,EAAE,EAAGA,EAAE,EAAGA,IAAOyE,EAAO,GAAGzE,GAAG,EACvC,IAAK,IAAIA,EAAE,EAAGA,EAAE,GAAIA,IAAOyE,EAAO,GAAGzE,GAAG,GAGjC,SAAS4H,IACZ,OAAO,cAAC,EAAD,CACHd,UAAU,WACVtC,MAAOkD,IACPjD,OAAQA,IAIT,SAASoD,IACZ,OAAO,cAAC,EAAD,CACHf,UAAU,WACVtC,MAAOkD,IACPjD,OAAQA,EACRnD,OAAQ,CAAC,UAAW,aAIrB,SAASwG,IACZ,OAAO,cAAC,EAAD,CACHhB,UAAU,WACVtC,MAAOkD,IACPjD,OAAQA,EACRnD,OAAQ,CAAC,UAAW,UAAW,a,yJCtBvC,SAASyG,EAAT,GAAiE,IAA1CC,EAAyC,EAAzCA,WAAYC,EAA6B,EAA7BA,cAAeC,EAAc,EAAdA,YAC9C,OAAO,eAACC,EAAA,EAAD,CAAOC,UAAW,MAAOC,WAAW,SAASC,QAAS,EAAtD,UACH,cAACC,EAAA,EAAD,CAAKC,GAAI,CAACC,MAAO,KAAjB,SACI,cAACC,EAAA,EAAD,CAAYrD,MAAM,UAAU,aAAW,aAAasD,UAAU,OAClDC,QAASV,EADrB,SAEI,cAAC,IAAD,QAGR,cAACK,EAAA,EAAD,CAAKC,GAAI,CAACC,MAAO,IAAjB,SACI,cAACI,EAAA,EAAD,CAAYC,GAAG,eAAeC,cAAY,EAACC,MAAO,QAAlD,sBAIJ,cAACT,EAAA,EAAD,CAAKC,GAAI,CAACC,MAAO,KAAjB,SACI,cAACQ,EAAA,EAAD,CAAQC,aAAc,EAAKpH,IAAK,EAAGK,IAAK,EAAKgH,KAAM,IAC3CC,KAAM,QACN5E,MAAOwD,EACPqB,SAAU,SAACnC,EAAEhH,GAAO+H,EAAc/H,IAClC,aAAW,SACXoJ,kBAAkB,cAMtC,SAASC,EAAT,GAAoE,IAA3CC,EAA0C,EAA1CA,WAAYC,EAA8B,EAA9BA,cAAeC,EAAe,EAAfA,aAChD,OAAO,eAACvB,EAAA,EAAD,CAAOC,UAAW,MAAOC,WAAW,SAASC,QAAS,EAAtD,UACH,eAACC,EAAA,EAAD,CAAKC,GAAI,CAACC,MAAO,KAAjB,UACI,cAACC,EAAA,EAAD,CAAYrD,MAAM,UAAU,aAAW,+BAA+BsD,UAAU,OACpEC,QAAS,SAAC1B,GAAD,OAAOwC,EAAaxC,EAAGsC,IAD5C,SAEI,cAAC,IAAD,MAEJ,cAACd,EAAA,EAAD,CAAYrD,MAAM,UAAU,aAAW,+BAA+BsD,UAAU,OACpEC,QAAS,SAAC1B,GAAD,OAAOwC,EAAaxC,GAAIsC,IAD7C,SAEI,cAAC,IAAD,SAGR,cAACjB,EAAA,EAAD,CAAKC,GAAI,CAACC,MAAO,IAAjB,SACI,cAACI,EAAA,EAAD,CAAYC,GAAG,eAAeC,cAAY,EAACC,MAAO,QAAlD,yBAIJ,cAACT,EAAA,EAAD,CAAKC,GAAI,CAACC,MAAO,KAAjB,SACI,cAACQ,EAAA,EAAD,CAAQC,aAAc,EAAKpH,IAAK,EAAGK,IAAK,EAAKgH,KAAM,IAC3CC,KAAM,QACN5E,MAAOgF,EACPH,SAAU,SAACnC,EAAEhH,GAAOuJ,EAAcvJ,IAClC,aAAW,mBACXoJ,kBAAkB,cAOtC,SAASK,GAAT,GAAiC,IAAR9F,EAAO,EAAPA,KACrB,OAAO,sBAAKiD,UAAW,UAAhB,UACH,eAAC+B,EAAA,EAAD,CAAYF,UAAW,MAAvB,6CAA8D,4CAA9D,UACA,+BAAOrC,KAAKE,UAAU3C,QAKf,SAAS+F,GAAT,GAAoC,IAAVC,EAAS,EAATA,OACrC,EAAwB9E,mBAAS,SAAjC,mBAAO+E,EAAP,KAAaC,EAAb,KACA,EAAoChF,mBAAS,GAA7C,mBAAOiD,EAAP,KAAmBC,EAAnB,KACA,EAAoClD,mBAAS,KAA7C,mBAAOyE,EAAP,KAAmBC,EAAnB,KACA,EAAgC1E,mBAAS,MAAzC,mBAAOiF,EAAP,KAAiBC,EAAjB,KACA,EAA8BlF,mBAAS,MAAvC,mBAAO4B,EAAP,KAAgBuD,EAAhB,KACMC,EAAOC,QAAQJ,GAoBrB,OAAO,eAACK,EAAA,EAAD,CAAMC,WAAS,EAAClC,UAAU,MAAMmC,QAAS,gBAAzC,UACH,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACI,eAACtC,EAAA,EAAD,CAAOrB,UAAU,UAAUsB,UAAU,MAAME,QAAS,EAAGD,WAAW,SAAlE,UACI,eAACqC,EAAA,EAAD,CACIlG,MAAOsF,EACPV,KAAK,QACLuB,WAAS,EACTtB,SAzBG,SAACnC,EAAGhH,GACT,OAANA,GAAY6J,EAAQ7J,IAyBZ,aAAW,sCALf,UAOI,cAAC0K,EAAA,EAAD,CAAcpG,MAAM,QAAQoE,QAAS,SAAC1B,GAAD,OAAO6C,EAAQ,UAApD,mBACA,cAACa,EAAA,EAAD,CAAcpG,MAAM,WAAWoE,QAAS,SAAC1B,GAAD,OAAO6C,EAAQ,aAAvD,yBAEM,UAATD,EACG,cAAC/B,EAAD,CACIC,WAAYA,EACZC,cAAeA,EACfC,YAhCA,SAAChB,GACjBA,EAAEC,iBACF0C,EAAOjE,QAAQgB,UAAUoB,MAiCb,cAACuB,EAAD,CACIC,WAAYA,EACZC,cAAeA,EACfC,aAlCC,SAACxC,EAAGhH,GACrBgH,EAAEC,iBACF0C,EAAOjE,QAAQa,gBAAgBvG,WAqC/B,cAACmK,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACI,eAACtC,EAAA,EAAD,CAAOrB,UAAU,UAAUsB,UAAU,MAAMC,WAAW,SAASwC,eAAe,WAA9E,UACI,cAACnC,EAAA,EAAD,CAAYrD,MAAM,UAAU,aAAW,YAAYsD,UAAU,OACjDC,QAtCL,SAAC1B,GAChBgD,EAAWL,EAAOjE,QAAQzC,cAC1B8G,EAAY/C,EAAE4D,gBAmCN,SAEI,cAAC,IAAD,MAEJ,cAACC,EAAA,EAAD,CACIZ,KAAMA,EACNH,SAAUA,EACVgB,QAxCI,WAChBf,EAAY,OAwCAgB,aAAc,CAACC,SAAU,SAAUC,WAAY,SAJnD,SAMI,cAACxB,GAAD,CAAgB9F,KAAM8C,cC3I3B,SAASyE,KACpB,IAAM7G,EAAMvC,IAAMmD,YAClB,OAAO,qCACH,cAACyE,GAAD,CAAiBC,OAAQtF,IACzB,cAAC,EAAD,CACIA,IAAKA,EACLuC,UAAU,WACVtC,MAAOkD,IACPhD,UAAU,OCRP,SAAS2G,KACpB,IAAM9G,EAAMvC,IAAMmD,YAClB,OAAO,qCACH,cAACyE,GAAD,CAAiBC,OAAQtF,IACzB,cAAC,EAAD,CACIA,IAAKA,EACLuC,UAAU,WACVtC,MAAOkD,IACPhD,UAAU,OCRtB,SAAS4G,KACL,OAAO,qCACH,gDAAkB,4CAAlB,iBACA,8BACI,4CADJ,sEAMR,SAASC,GAAT,GAAgC,IAAbC,EAAY,EAAZA,UAETC,EAAQD,EAAUzL,KAAI,SAAC2L,GACzB,IAAMC,EAAMC,+DAA8BF,EAC1C,OAAO,mBAAG5E,UAAU,YAAoB+E,KAAMF,EAAK9B,OAAQ,SAAUiC,IAAK,aAAnE,SAAkFJ,GAApDA,MAEzC,OAAO,oBAAG5E,UAAW,YAAd,8BACiB2E,KAK5B,SAASM,KACL,OACI,qCACI,wCACA,yHAGA,4GAGA,cAACnE,EAAD,IACA,cAACC,EAAD,IACA,cAACC,EAAD,IACA,cAACyD,GAAD,CAAUC,UAAW,CAAC,oBAKlC,SAASQ,KACL,OAAQ,qCACJ,oDACA,wJAIA,0OAKA,cAACZ,GAAD,IACA,oHAEwB,mBAAGS,KAAM,sBAAT,iBAFxB,mBAIA,cAACN,GAAD,CAAUC,UAAW,CAAC,oBAI9B,SAASS,KACL,OAAQ,qCACJ,yDACA,+GAGA,cAACZ,GAAD,IACA,cAACE,GAAD,CAAUC,UAAW,CAAC,oBAK9B,SAASU,KAUL,OAAO,qCACH,qCACA,4DAC+B,sDAD/B,qEAGU,4CAHV,qDAIa,yCAJb,YAMA,8BACI,+BAlBO,iDAoBX,uGAC0E,sCAD1E,UAC6F,0CAD7F,6CAE2C,sCAF3C,sEAGqB,yCAHrB,QAG4C,0CAH5C,aAKA,8BAAK,+BAxBQ,6FAyBb,8GAGA,8BAAK,iCA3BG,8EACK,yGAEH,+PAyBV,kJAIA,cAACX,GAAD,CAAUC,UAAW,CAAC,cAAe,cAAe,oBAkB7CW,OAbf,WACI,OACI,eAACC,EAAA,EAAD,CAAWC,SAAU,KAAMvF,UAAU,MAArC,UACI,cAACwE,GAAD,IACA,cAACS,GAAD,IACA,cAACC,GAAD,IACA,cAACC,GAAD,IACA,cAACC,GAAD,QCnHGI,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFnH,SAASoH,eAAe,SAM1BZ,O","file":"static/js/main.15724251.chunk.js","sourcesContent":["/** manipulation of colors **/\n\n/**\n * convert a hex color to a length-3 rgb array with values in [0, 1]\n *\n * @param x string, hex color\n * @returns {unknown[]} array of length 3 with rgb values in [0, 1]\n */\nexport function hex2rgb(x) {\n  return [1, 3, 5].map(i => x.substr(i, 2)).map(v => parseInt(v, 16)).map(v => v / 255);\n}\n/**\n * convert a length-3 rgb array with values in [0, 1] to a hex color code\n *\n * @param x array of length 3 with [0, 1] values\n * @returns {string} hex color\n */\n\nexport function rgb2hex(x) {\n  return \"#\" + x.map(v => Math.round(v * 255)).map(v => v.toString(16).padStart(2, \"0\")).join(\"\");\n}\n/** parse a css color string like rgb(0, 255, 0) to a hex code **/\n\nexport function css2hex(x) {\n  return \"#\" + x.replace(\"rgb(\", \"\").replace(\" \", \"\").replace(\")\", \"\").split(\",\").map(v => parseInt(v).toString(16).padStart(2, \"0\")).join(\"\");\n}\n/**\n * create an array of n hex colors, from start to end\n *\n * @param start string, hex color\n * @param end string, hex color\n * @param n integer, length of output array\n * @returns {string[]}\n */\n\nexport function colorRamp(start, end, n = 2) {\n  const start_rgb = hex2rgb(start),\n        end_rgb = hex2rgb(end);\n  const increment_rgb = [0, 1, 2].map(i => (end_rgb[i] - start_rgb[i]) / (n - 1));\n  return Array.from(new Array(n).keys()).map(i => [0, 1, 2].map(j => start_rgb[j] + i * increment_rgb[j])).map(x => rgb2hex(x));\n}\n/** create an array of colors of length n\n *\n * @param colors array of colors, which will be expanded to length n\n * @param n integer, final length of array\n * @returns {string[]} array of hex colors, some colors may be repeated at\n * boundaries between color steps defined by the short colors array; when\n * n is large, these repeats should not be noticeable\n */\n\nexport function colorArray(colors, n = 128) {\n  const col_len = colors.length;\n  if (col_len >= n) return colors.slice(0, n);\n  if (col_len === 2) return colorRamp(colors[0], colors[1], n);\n  const result = new Array(n);\n  const ramp_len = Math.ceil(n / (col_len - 1));\n\n  for (let i = 0; i < col_len - 1; i++) {\n    let ramp = colorRamp(colors[i], colors[i + 1], ramp_len);\n\n    for (let j = 0; j < ramp_len; j++) {\n      result[Math.min(Math.round(i * n / (col_len - 1)) + j, n - 1)] = ramp[j];\n    }\n  }\n\n  return result;\n}","import React, { useState } from 'react';\nimport './TextHeat.css';\nimport { colorArray } from \"./colors\";\nconst {\n  forwardRef,\n  useImperativeHandle\n} = React;\n/** force a number into the unit interval [0, 1] **/\n\nconst unit_interval = v => {\n  return Math.min(1, Math.max(0, Math.round(v * 1000) / 1000));\n};\n/** concatenate neighboring segments with the same values **/\n\n\nfunction joinSegments(values, weights) {\n  const new_values = [values[0]],\n        new_weights = [weights[0]];\n\n  for (let i = 1; i < weights.length; i++) {\n    if (weights[i] === weights[i - 1]) {\n      new_values[new_values.length - 1] += values[i];\n    } else {\n      new_values.push(values[i]);\n      new_weights.push(weights[i]);\n    }\n  }\n\n  return [new_values, new_weights];\n} // modified from an answer on stackoverflow\n// https://stackoverflow.com/questions/48810664/get-click-range-relative-to-parent-element\n\n\nfunction getOffsetRelativeTo(parentElement, currentNode) {\n  let result = 0,\n      prevSibling,\n      nodeContent;\n  if (currentNode === parentElement) return 0;\n  if (!parentElement.contains(currentNode)) return -1;\n\n  while (prevSibling = (prevSibling || currentNode).previousSibling) {\n    nodeContent = prevSibling.innerText || prevSibling.nodeValue || \"\";\n    result += nodeContent.length;\n  }\n\n  return result + getOffsetRelativeTo(parentElement, currentNode.parentNode);\n}\n/**\n * traverse an element and get an array with [0]=text and [1]=colors **/\n\n\nfunction getContent(element, result = [[], []]) {\n  const children = Array.from(element.childNodes);\n\n  for (let child of children) {\n    if (child.hasChildNodes()) {\n      result = getContent(child, result);\n    } else {\n      result[0].push(child.textContent);\n      result[1].push(unit_interval(parseFloat(child.parentElement.getAttribute(\"data-weight\"))));\n    }\n  }\n\n  return result;\n}\n\nfunction changeContent(data, start, end, v, increment = false) {\n  const old_values = data[0],\n        old_weights = data[1];\n  let pos = 0,\n      i = 0,\n      new_values = [],\n      new_weights = [];\n\n  while (i < old_values.length) {\n    let i_value = old_values[i],\n        i_weight = old_weights[i];\n    let i_len = i_value.length;\n\n    if (pos + i_len <= start || pos >= end) {\n      // segments before selection, or after section\n      new_values.push(i_value);\n      new_weights.push(i_weight);\n    } else if (pos === start && pos + i_len === end) {\n      // special case: the selection overlaps the segment exactly\n      new_values.push(i_value);\n      new_weights.push(increment ? i_weight + v : v);\n    } else {\n      // there is some nontrivial overlap\n      if (pos < start) {\n        new_values.push(i_value.slice(0, start - pos));\n        new_weights.push(i_weight);\n        new_values.push(i_value.slice(start - pos, end - pos));\n        new_weights.push(increment ? i_weight + v : v);\n      } else {\n        new_values.push(i_value.slice(0, end - pos));\n        new_weights.push(increment ? i_weight + v : v);\n      }\n\n      if (pos + i_len > end) {\n        new_values.push(i_value.slice(end - pos));\n        new_weights.push(i_weight);\n      }\n    }\n\n    pos += i_len;\n    i += 1;\n  }\n\n  return joinSegments(new_values, new_weights.map(x => unit_interval(x)));\n}\n\nconst TextHeat = forwardRef((props, ref) => {\n  let {\n    value,\n    weight,\n    colors,\n    editable\n  } = props; // inputs can:\n  // - compatible arrays of value/weight,\n  // - a single value string\n  // - a single value string with an array of weights (one float per character)\n\n  if (!value) value = [\"\"];\n\n  if (typeof value === \"string\") {\n    if (weight && weight.length === value.length) {\n      const breakpoint = weight.map((w, i) => {\n        if (i === 0 || w != weight[i - 1]) return i;\n      }).filter(i => i >= 0);\n      value = breakpoint.map((b, i) => value.slice(b, breakpoint[i + 1]));\n      weight = breakpoint.map((b, i) => weight[b]);\n    } else {\n      value = [value];\n      weight = [0.0];\n    }\n  }\n\n  const [data, setData] = useState([value, weight]);\n  const color_array = typeof colors === \"undefined\" ? colorArray([\"#ffffff\", \"#ff8888\"], 128) : colorArray(colors, 128);\n  const mainRef = /*#__PURE__*/React.createRef();\n  const segments = data[0].map((x, i) => {\n    let color = color_array[Math.round(data[1][i] * 127)];\n    return /*#__PURE__*/React.createElement(\"span\", {\n      key: i,\n      \"data-weight\": data[1][i],\n      style: {\n        backgroundColor: color\n      }\n    }, x);\n  });\n  /**\n   * handle copy-paste to only insert plain text (without spans and css)\n   * This is important. Without it, after copy-paste in an editable div,\n   * updating the weights can lead to strange muddled-up text in the div.\n   * **/\n\n  const handlePaste = e => {\n    e.preventDefault();\n    let text = (e.originalEvent || e).clipboardData.getData('text/plain');\n    document.execCommand(\"insertHTML\", false, text);\n  }; // get start and end coordinates for a selection\n\n\n  const getSelection = () => {\n    const el = mainRef.current;\n    const selection = document.getSelection();\n    if (!el.contains(selection.anchorNode)) return [-1, -1];\n    let range = selection.getRangeAt(0);\n    let start = getOffsetRelativeTo(el, range.startContainer) + range.startOffset;\n    let end = getOffsetRelativeTo(el, range.endContainer) + range.endOffset;\n    return [start, end];\n  }; // functions that can be called from outside the component, using refs\n\n\n  useImperativeHandle(ref, () => ({\n    getContent: () => {\n      return JSON.parse(JSON.stringify(data));\n    },\n    incrementWeight: (v, start, end) => {\n      if (start === undefined || end === undefined) {\n        [start, end] = getSelection();\n      }\n\n      if (end === start) return;\n      const content = getContent(mainRef.current);\n      setData(changeContent(content, start, end, v, true));\n    },\n    setWeight: (v, start, end) => {\n      if (start === undefined || end === undefined) {\n        [start, end] = getSelection();\n      }\n\n      if (end === start) return;\n      const content = getContent(mainRef.current);\n      setData(changeContent(content, start, end, v, false));\n    },\n    refresh: () => {\n      setData(getContent(mainRef.current));\n    }\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: mainRef,\n    className: \"textheat\",\n    contentEditable: editable,\n    suppressContentEditableWarning: true,\n    onPaste: handlePaste,\n    role: \"textbox\"\n  }, segments);\n});\nexport default TextHeat;","/** Example use of a TextHeat component **/\n\nimport TextHeat from \"textheat\";\nimport React from \"react\";\nimport {sentence} from \"./lorem_ipsum.json\"\n\n// manually create an array of weights\nconst weight = sentence.split(\"\").map((i) => 0.0)\nfor (let i=0; i<21; i++) { weight[0+i]=0.2 }\nfor (let i=0; i<5; i++) { weight[6+i]=0.4 }\nfor (let i=0; i<8; i++) { weight[40+i]=0.5 }\nfor (let i=0; i<8; i++) { weight[48+i]=0.7 }\nfor (let i=0; i<8; i++) { weight[56+i]=0.8 }\nfor (let i=0; i<8; i++) { weight[64+i]=0.9 }\nfor (let i=0; i<8; i++) { weight[72+i]=1 }\nfor (let i=0; i<17; i++) { weight[80+i]=0.6 }\n\n\nexport function ExampleStatic1() {\n    return <TextHeat\n        className=\"textheat\"\n        value={sentence}\n        weight={weight}\n    />\n}\n\nexport function ExampleStatic2() {\n    return <TextHeat\n        className=\"textheat\"\n        value={sentence}\n        weight={weight}\n        colors={[\"#ffffff\", \"#8888ff\"]}\n    />\n}\n\nexport function ExampleStatic3() {\n    return <TextHeat\n        className=\"textheat\"\n        value={sentence}\n        weight={weight}\n        colors={[\"#ffffff\", \"#ffff88\", \"#ff9999\"]}\n    />\n}\n","/** A custom toolbar **/\n\nimport Slider from '@mui/material/Slider';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Popover from '@mui/material/Popover';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\nimport BrushIcon from '@mui/icons-material/Brush';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\nimport IconButton from '@mui/material/IconButton';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport {useState} from \"react\";\n\n\nfunction PaintToolbar({paintValue, setPaintValue, handlePaint}) {\n    return <Stack direction={\"row\"} alignItems=\"center\" spacing={2}>\n        <Box sx={{width: 120}}>\n            <IconButton color=\"primary\" aria-label=\"set weight\" component=\"span\"\n                        onClick={handlePaint}>\n                <BrushIcon />\n            </IconButton>\n        </Box>\n        <Box sx={{width: 80}}>\n            <Typography id=\"input-slider\" gutterBottom align={\"right\"}>\n                weight\n            </Typography>\n        </Box>\n        <Box sx={{width: 100}}>\n            <Slider defaultValue={0.0} min={0} max={1.0} step={0.01}\n                    size={\"small\"}\n                    value={paintValue}\n                    onChange={(e,v) => {setPaintValue(v)}}\n                    aria-label=\"weight\"\n                    valueLabelDisplay=\"auto\"\n            />\n        </Box>\n    </Stack>\n}\n\nfunction TouchUpToolbar({touchValue, setTouchValue, handleUpdate}) {\n    return <Stack direction={\"row\"} alignItems=\"center\" spacing={2}>\n        <Box sx={{width: 120}}>\n            <IconButton color=\"primary\" aria-label=\"increase weight on selection\" component=\"span\"\n                        onClick={(e) => handleUpdate(e, touchValue)}>\n                <AddIcon />\n            </IconButton>\n            <IconButton color=\"primary\" aria-label=\"decrease weight on selection\" component=\"span\"\n                        onClick={(e) => handleUpdate(e, -touchValue)}>\n                <RemoveIcon />\n            </IconButton>\n        </Box>\n        <Box sx={{width: 80}}>\n            <Typography id=\"input-slider\" gutterBottom align={\"right\"}>\n                increment\n            </Typography>\n        </Box>\n        <Box sx={{width: 100}}>\n            <Slider defaultValue={0.0} min={0} max={1.0} step={0.01}\n                    size={\"small\"}\n                    value={touchValue}\n                    onChange={(e,v) => {setTouchValue(v)}}\n                    aria-label=\"weight increment\"\n                    valueLabelDisplay=\"auto\"\n            />\n        </Box>\n    </Stack>\n}\n\n\nfunction PopoverContent({data}) {\n    return <div className={\"popover\"}>\n        <Typography component={\"div\"}>Current data and weights in the <code>TextHeat</code> box</Typography>\n        <code>{JSON.stringify(data)}</code>\n    </div>\n}\n\n\nexport default function TextHeatToolbar({target}) {\n    const [mode, setMode] = useState(\"paint\")\n    const [paintValue, setPaintValue] = useState(1)\n    const [touchValue, setTouchValue] = useState(0.25)\n    const [anchorEl, setAnchorEl] = useState(null);\n    const [content, setContent] = useState(null)\n    const open = Boolean(anchorEl);\n\n    const handleMode = (e, v) => {\n        if (v !== null) setMode(v);\n    };\n    const handlePaint = (e) => {\n        e.preventDefault()\n        target.current.setWeight(paintValue)\n    }\n    const handleUpdate = (e, v) => {\n        e.preventDefault()\n        target.current.incrementWeight(v)\n    }\n    const handleShow = (e) => {\n        setContent(target.current.getContent())\n        setAnchorEl(e.currentTarget);\n    }\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n    return <Grid container direction=\"row\" justify={\"space-between\"}>\n        <Grid item xs={11}>\n            <Stack className=\"toolbar\" direction=\"row\" spacing={2} alignItems=\"center\">\n                <ToggleButtonGroup\n                    value={mode}\n                    size=\"small\"\n                    exclusive\n                    onChange={handleMode}\n                    aria-label=\"mode for adjusting textheat weights\"\n                >\n                    <ToggleButton value=\"paint\" onClick={(e) => setMode(\"paint\")}>Paint</ToggleButton>\n                    <ToggleButton value=\"touch-up\" onClick={(e) => setMode(\"touch-up\")}>Touch-up</ToggleButton>\n                </ToggleButtonGroup>\n                {mode === \"paint\" ?\n                    <PaintToolbar\n                        paintValue={paintValue}\n                        setPaintValue={setPaintValue}\n                        handlePaint={handlePaint}\n                    />\n                    :\n                    <TouchUpToolbar\n                        touchValue={touchValue}\n                        setTouchValue={setTouchValue}\n                        handleUpdate={handleUpdate}\n                    />\n                }\n            </Stack>\n        </Grid>\n        <Grid item xs={1}>\n            <Stack className=\"toolbar\" direction=\"row\" alignItems=\"center\" justifyContent=\"flex-end\">\n                <IconButton color=\"primary\" aria-label=\"show data\" component=\"span\"\n                            onClick={handleShow}>\n                    <VisibilityIcon />\n                </IconButton>\n                <Popover\n                    open={open}\n                    anchorEl={anchorEl}\n                    onClose={handleClose}\n                    anchorOrigin={{vertical: 'bottom', horizontal: 'right'}}\n                >\n                    <PopoverContent data={content} />\n                </Popover>\n            </Stack>\n        </Grid>\n    </Grid>\n}\n","/** Example use of a TextHeat component **/\n\nimport TextHeat from \"textheat\"\nimport React from \"react\"\nimport TextHeatToolbar from \"./toolbar\"\nimport {sentence} from \"./lorem_ipsum.json\"\n\n\nexport default function ExampleAdjustable() {\n    const ref = React.createRef()\n    return <>\n        <TextHeatToolbar target={ref}/>\n        <TextHeat\n            ref={ref}\n            className=\"textheat\"\n            value={sentence}\n            editable={false}\n        />\n    </>\n}\n","/** Example use of a TextHeat component **/\n\nimport TextHeat from \"textheat\"\nimport React from \"react\"\nimport TextHeatToolbar from \"./toolbar\"\nimport {sentence} from \"./lorem_ipsum.json\"\n\n\nexport default function ExampleEditable() {\n    const ref = React.createRef()\n    return <>\n        <TextHeatToolbar target={ref}/>\n        <TextHeat\n            ref={ref}\n            className=\"textheat\"\n            value={sentence}\n            editable={true}\n        />\n    </>\n}\n","import './App.css';\nimport React from \"react\";\nimport Container from '@mui/material/Container';\nimport {ExampleStatic1, ExampleStatic2, ExampleStatic3} from \"./example1\"\nimport ExampleAdjustable from \"./example2\"\nimport ExampleEditable from \"./example3\"\n\n\nfunction SectionIntro() {\n    return <>\n        <h1>Examples with <code>TextHeat</code> components</h1>\n        <p>\n            <code>TextHeat</code> components display text and associated weights in a heatmap.\n        </p>\n    </>\n}\n\nfunction LinkCode({filenames}) {\n    const base_url = \"https://github.com/tkonopka/textheat/blob/main\"\n    const links = filenames.map((f) => {\n        const url = base_url + \"/examples/src/\" + f\n        return <a className=\"link_code\" key={f} href={url} target={\"_blank\"} rel={\"noreferrer\"}>{f}</a>\n    })\n    return <p className={\"link_code\"}>\n        Source code:&nbsp; {links}\n    </p>\n}\n\n\nfunction SectionStatic() {\n    return (\n        <>\n            <h2>Static</h2>\n            <p>\n                Static heatmaps communicate the varying weights associated with parts of a body of text.\n            </p>\n            <p>\n                The default color scale uses shades of red, but the colors can be adjusted.\n            </p>\n            <ExampleStatic1 />\n            <ExampleStatic2 />\n            <ExampleStatic3 />\n            <LinkCode filenames={[\"example1.js\"]}/>\n        </>\n    )\n}\n\nfunction SectionAdjustable() {\n    return (<>\n        <h2>Adjustable weights</h2>\n        <p>\n            The component can adjust the weights (colors) for text fragments.\n            This functionality can be used to create annotations.\n        </p>\n        <p>\n            Below, select some text in the box. Then use the paint tool in the\n            toolbar to give the selection a certain weight (color). Or use the\n            touch-up tool to increase or decrease the weight by a small amount.\n        </p>\n        <ExampleAdjustable />\n        <p>\n            (Note that the toolbar is not part of the component. The above\n            implementation uses <a href={\"https://www.mui.com\"}>MUI</a> components.)\n        </p>\n        <LinkCode filenames={[\"example2.js\"]}/>\n    </>)\n}\n\nfunction SectionEditable() {\n    return (<>\n        <h2>Adjustable and editable</h2>\n        <p>\n            The component can be editable. Click inside the box and start typing new text.\n        </p>\n        <ExampleEditable />\n        <LinkCode filenames={[\"example3.js\"]}/>\n    </>)\n}\n\n\nfunction SectionApi() {\n    const simple = \"<TextHeat value='Lorem ipsum dolor ...' />\"\n    const weighted = \"<TextHeat\\n    value=['Lorem ', 'ipsum ', 'dolor ...']\\n    weight=[0.2, 0.4, 0.2]\\n/>\"\n    const ref = \"// before rendering, create a ref object\\nconst ref = React.createRef()\\n\\n\"\n    const with_ref = \"// pass the reference to TextHeat \\n\"+\n        \"<TextHeat\\n    ref={ref}\\n    value='Lorem impsum dolor ...'\\n/>\\n\"\n    const later = \"\\n\" +\n        \"// fetch text and weights from the component\\nref.current.getContent()\\n\" +\n        \"// increment weight on a selected/highlighted section\\nref.current.incrementWeight(0.2)\\n\" +\n        \"// set weight on selected/highlighted section to a value\\nref.current.setWeight(0.5)\"\n    return <>\n        <h2>Api</h2>\n        <p>\n            Consider the example text '<i>Lorem ipsum dolor ...</i>'.\n            If there are no weights associated with the text, then a\n            basic <code>TextHeat</code> component can be constructed by setting\n            only the <code>value</code> prop.\n        </p>\n        <pre>\n            <code>{simple}</code>\n        </pre>\n        <p>\n            Suppose we have weights that associate a value of 0.2 with the words '<i>Lorem</i>' and '<i>dolor ...</i>',\n            but a higher value of 0.4 to the word '<i>ipsum</i>'. This data should be prepared into segments and\n            then provided as <code>value</code> and <code>weight</code> props.\n        </p>\n        <pre><code>{weighted}</code></pre>\n        <p>\n            To adjust the content of the box, it must be created with a React ref object.\n        </p>\n        <pre><code>{ref}{with_ref}{later}</code></pre>\n        <p>\n            The above snippets only highlight some of the key steps. See the source code\n            of the examples for further details.\n        </p>\n        <LinkCode filenames={[\"example1.js\", \"example2.js\", \"example3.js\"]}/>\n    </>\n}\n\n\nfunction App() {\n    return (\n        <Container maxWidth={\"md\"} className=\"App\">\n            <SectionIntro />\n            <SectionStatic />\n            <SectionAdjustable />\n            <SectionEditable />\n            <SectionApi />\n        </Container>\n    );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}